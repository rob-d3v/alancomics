/**
 * SmartPauseSystem - Sistema de Pausa Inteligente para Narra√ß√£o
 * 
 * Este m√≥dulo implementa um sistema que verifica se o texto sendo narrado est√° vis√≠vel
 * na tela do usu√°rio e controla a narra√ß√£o para garantir que o usu√°rio veja o que est√°
 * sendo narrado exatamente de onde foi coletado.
 */
class SmartPauseSystem {
    constructor() {
        // Configura√ß√µes do sistema
        this.visibilityThreshold = 0.5; // Porcentagem m√≠nima do elemento que deve estar vis√≠vel (50%)
        this.waitTimeBeforeNext = 800; // Tempo de espera em ms antes de verificar o pr√≥ximo elemento
        this.checkInterval = 200; // Intervalo em ms para verificar visibilidade durante narra√ß√£o
        
        // Estado do sistema
        this.isActive = false;
        this.currentElement = null;
        this.narrationStartTime = null;
        this.visibilityCheckTimer = null;
        this.waitingForVisibility = false;
        
        // Refer√™ncias a outros m√≥dulos
        this.narrator = null;
        this.selectionManager = null;
        
        // Inicializar
        this.initialize();
    }
    
    /**
     * Inicializa o sistema de pausa inteligente
     */
    initialize() {
        // Esperar o DOM estar completamente carregado
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setup());
        } else {
            this.setup();
        }
    }
    
    /**
     * Configura o sistema de pausa inteligente
     */
    setup() {
        // Obter refer√™ncia ao narrador principal
        if (window.comicNarrator) {
            this.narrator = window.comicNarrator;
            console.log('SmartPauseSystem: Conectado ao narrador principal');
        } else {
            console.warn('SmartPauseSystem: Narrador principal n√£o encontrado');
            // Tentar novamente ap√≥s um curto per√≠odo
            setTimeout(() => {
                if (window.comicNarrator) {
                    this.narrator = window.comicNarrator;
                    console.log('SmartPauseSystem: Conectado ao narrador principal (tentativa 2)');
                }
            }, 1000);
        }
        
        // Obter refer√™ncia ao gerenciador de sele√ß√£o retangular
        if (window.rectangularSelectionManager) {
            this.selectionManager = window.rectangularSelectionManager;
            console.log('SmartPauseSystem: Conectado ao gerenciador de sele√ß√£o retangular');
        } else {
            console.warn('SmartPauseSystem: Gerenciador de sele√ß√£o retangular n√£o encontrado');
            // Tentar novamente ap√≥s um curto per√≠odo
            setTimeout(() => {
                if (window.rectangularSelectionManager) {
                    this.selectionManager = window.rectangularSelectionManager;
                    console.log('SmartPauseSystem: Conectado ao gerenciador de sele√ß√£o retangular (tentativa 2)');
                }
            }, 1000);
        }
        
        // Registrar o sistema globalmente para acesso de outros m√≥dulos
        window.smartPauseSystem = this;
        console.log('SmartPauseSystem: Sistema de pausa inteligente inicializado');
    }
    
    /**
     * Ativa o sistema de pausa inteligente
     */
    activate() {
        if (this.isActive) return;
        
        this.isActive = true;
        console.log('SmartPauseSystem: Sistema de pausa inteligente ativado');
    }
    
    /**
     * Desativa o sistema de pausa inteligente
     */
    deactivate() {
        if (!this.isActive) return;
        
        this.isActive = false;
        this.stopVisibilityCheck();
        console.log('SmartPauseSystem: Sistema de pausa inteligente desativado');
    }
    
    /**
     * Verifica se um elemento est√° vis√≠vel na tela
     * @param {HTMLElement} element - Elemento a ser verificado
     * @returns {Object} - Objeto com informa√ß√µes de visibilidade
     */
    checkElementVisibility(element) {
        // Valores padr√£o para coordenadas quando o elemento n√£o existe
        const defaultCoordinates = {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
            width: 0,
            height: 0
        };
        
        // Se o elemento n√£o existir, retornar objeto com coordenadas padr√£o
        if (!element) {
            return { 
                isVisible: false, 
                visiblePercentage: 0,
                position: 'elemento inexistente',
                coordinates: defaultCoordinates
            };
        }
        
        // Verificar se o elemento est√° realmente no DOM
        if (!document.body.contains(element)) {
            return { 
                isVisible: false, 
                visiblePercentage: 0,
                position: 'elemento n√£o est√° no DOM',
                coordinates: defaultCoordinates
            };
        }
        
        // Verificar se o elemento est√° oculto via CSS
        const style = window.getComputedStyle(element);
        if (style.display === 'none' || style.visibility === 'hidden' || style.opacity === '0') {
            return { 
                isVisible: false, 
                visiblePercentage: 0,
                position: 'elemento oculto via CSS',
                coordinates: defaultCoordinates
            };
        }
        
        const rect = element.getBoundingClientRect();
        const windowHeight = window.innerHeight || document.documentElement.clientHeight;
        const windowWidth = window.innerWidth || document.documentElement.clientWidth;
        
        // Extrair coordenadas do elemento para uso em todos os casos de retorno
        const coordinates = {
            top: rect.top,
            right: rect.right,
            bottom: rect.bottom,
            left: rect.left,
            width: rect.width,
            height: rect.height
        };
        
        // Verificar se o elemento tem dimens√µes muito pequenas (pode ser um erro)
        if (rect.width < 2 || rect.height < 2) {
            return { 
                isVisible: false, 
                visiblePercentage: 0, 
                position: 'dimens√µes muito pequenas',
                coordinates: coordinates
            };
        }
        
        // Verificar se o elemento est√° completamente fora da tela
        if (
            rect.bottom < 0 ||
            rect.top > windowHeight ||
            rect.right < 0 ||
            rect.left > windowWidth
        ) {
            return { 
                isVisible: false, 
                visiblePercentage: 0, 
                position: 'fora da tela',
                coordinates: coordinates
            };
        }
        
        // Calcular a √°rea total do elemento
        const elementArea = rect.width * rect.height;
        if (elementArea === 0) {
            return { 
                isVisible: false, 
                visiblePercentage: 0, 
                position: '√°rea zero',
                coordinates: coordinates
            };
        }
        
        // Calcular a √°rea vis√≠vel do elemento
        const visibleTop = Math.max(0, rect.top);
        const visibleBottom = Math.min(windowHeight, rect.bottom);
        const visibleLeft = Math.max(0, rect.left);
        const visibleRight = Math.min(windowWidth, rect.right);
        
        const visibleWidth = Math.max(0, visibleRight - visibleLeft);
        const visibleHeight = Math.max(0, visibleBottom - visibleTop);
        const visibleArea = visibleWidth * visibleHeight;
        
        // Calcular a porcentagem vis√≠vel (garantir que n√£o seja negativa)
        const visiblePercentage = Math.max(0, Math.min(1, visibleArea / elementArea));
        
        // Determinar a posi√ß√£o do elemento na tela
        let position = '';
        if (rect.top < 0) position += 'acima ';
        if (rect.bottom > windowHeight) position += 'abaixo ';
        if (rect.left < 0) position += '√† esquerda ';
        if (rect.right > windowWidth) position += '√† direita ';
        if (!position) position = 'totalmente vis√≠vel';
        
        // Verificar se o elemento est√° suficientemente vis√≠vel
        const isVisible = visiblePercentage >= this.visibilityThreshold;
        
        return {
            isVisible,
            visiblePercentage,
            position,
            coordinates: coordinates
        };
    }
    
    /**
     * Inicia a verifica√ß√£o cont√≠nua de visibilidade durante a narra√ß√£o
     * @param {HTMLElement} element - Elemento a ser verificado
     */
    startVisibilityCheck(element) {
        if (!this.isActive || !element) return;
        
        // Parar qualquer verifica√ß√£o anterior que possa estar em andamento
        this.stopVisibilityCheck();
        
        this.currentElement = element;
        this.narrationStartTime = Date.now();
        this.waitingForVisibility = false; // Iniciar como falso para verificar corretamente no primeiro ciclo
        this.checkCounter = 0; // Contador para controlar frequ√™ncia de logs
        
        // Registrar in√≠cio da narra√ß√£o com timestamp e coordenadas
        const visibility = this.checkElementVisibility(element);
        console.log(`üîä [${new Date().toISOString()}] Iniciando narra√ß√£o - Elemento: ${element.id || 'sem ID'}`);
        console.log(`üìç Coordenadas: (${visibility.coordinates.left}, ${visibility.coordinates.top}) - (${visibility.coordinates.right}, ${visibility.coordinates.bottom})`);
        console.log(`üëÅÔ∏è Visibilidade inicial: ${Math.round(visibility.visiblePercentage * 100)}% - ${visibility.position}`);
        
        // Verificar visibilidade inicial
        this.checkAndWaitForVisibility(element);
        
        // Usar um intervalo maior para reduzir a quantidade de verifica√ß√µes
        // e evitar sobrecarga de logs e processamento
        const checkInterval = Math.max(500, this.checkInterval); // M√≠nimo de 500ms entre verifica√ß√µes
        
        // Iniciar verifica√ß√£o peri√≥dica
        this.visibilityCheckTimer = setInterval(() => {
            this.checkCounter++;
            this.checkAndWaitForVisibility(element);
        }, checkInterval);
    }
    
    /**
     * Para a verifica√ß√£o de visibilidade
     */
    stopVisibilityCheck() {
        if (this.visibilityCheckTimer) {
            clearInterval(this.visibilityCheckTimer);
            this.visibilityCheckTimer = null;
        }
        
        this.waitingForVisibility = false;
        this.currentElement = null;
    }
    
    /**
     * Verifica a visibilidade e aguarda se necess√°rio
     * @param {HTMLElement} element - Elemento a ser verificado
     */
    checkAndWaitForVisibility(element) {
        if (!this.isActive || !element) return;
        
        // Verificar se o elemento ainda existe no DOM
        if (!document.body.contains(element)) {
            console.log(`‚ö†Ô∏è [${new Date().toISOString()}] Elemento n√£o est√° mais no DOM, parando verifica√ß√£o`);
            this.stopVisibilityCheck();
            return;
        }
        
        const visibility = this.checkElementVisibility(element);
        
        // Vari√°vel para controlar se o estado mudou e precisamos registrar
        let stateChanged = false;
        
        // Se o elemento n√£o estiver suficientemente vis√≠vel, pausar a narra√ß√£o
        if (!visibility.isVisible && this.narrator && this.narrator.synth.speaking && !this.waitingForVisibility) {
            // S√≥ registrar log quando o estado mudar (n√£o estava esperando e agora est√°)
            console.log(`‚è∏Ô∏è [${new Date().toISOString()}] Pausando narra√ß√£o - Elemento n√£o vis√≠vel (${Math.round(visibility.visiblePercentage * 100)}%)`);
            this.narrator.pauseSpeech();
            this.waitingForVisibility = true;
            stateChanged = true;
        }
        // Se o elemento estiver vis√≠vel e a narra√ß√£o estiver pausada, retomar
        else if (visibility.isVisible && this.narrator && this.narrator.synth.paused && this.waitingForVisibility) {
            // S√≥ registrar log quando o estado mudar (estava esperando e agora n√£o est√°)
            console.log(`‚ñ∂Ô∏è [${new Date().toISOString()}] Retomando narra√ß√£o - Elemento vis√≠vel (${Math.round(visibility.visiblePercentage * 100)}%)`);
            this.narrator.resumeSpeech();
            this.waitingForVisibility = false;
            stateChanged = true;
        }
        
        // Registrar informa√ß√µes de depura√ß√£o apenas quando o estado mudar ou periodicamente
        if (stateChanged) {
            // Log detalhado apenas quando o estado muda
            console.log(`üìä Detalhes de visibilidade: ${Math.round(visibility.visiblePercentage * 100)}% - ${visibility.position}`);
        } else if (this.checkCounter % 10 === 0) {
            // Log peri√≥dico a cada 10 verifica√ß√µes para depura√ß√£o, mas apenas se estiver esperando visibilidade
            if (this.waitingForVisibility) {
                console.log(`üîç [${new Date().toISOString()}] Verifica√ß√£o peri√≥dica: ${Math.round(visibility.visiblePercentage * 100)}% - ${visibility.position}`);
            }
        }
        
        // Se a narra√ß√£o terminou, parar a verifica√ß√£o
        if (this.narrator && !this.narrator.synth.speaking && !this.narrator.synth.paused) {
            this.stopVisibilityCheck();
        }
    }
    
    /**
     * Verifica se o pr√≥ximo elemento est√° vis√≠vel antes de prosseguir com a narra√ß√£o
     * @param {HTMLElement} nextElement - Pr√≥ximo elemento a ser narrado
     * @returns {Promise} - Promise que resolve quando o elemento estiver vis√≠vel
     */
    waitForNextElementVisibility(nextElement) {
        return new Promise(resolve => {
            if (!this.isActive || !nextElement) {
                resolve(true);
                return;
            }
            
            const checkVisibility = () => {
                const visibility = this.checkElementVisibility(nextElement);
                
                if (visibility.isVisible) {
                    console.log(`‚úÖ [${new Date().toISOString()}] Pr√≥ximo elemento vis√≠vel (${Math.round(visibility.visiblePercentage * 100)}%) - Continuando narra√ß√£o`);
                    resolve(true);
                } else {
                    console.log(`‚è≥ [${new Date().toISOString()}] Aguardando pr√≥ximo elemento ficar vis√≠vel (${Math.round(visibility.visiblePercentage * 100)}%)`);
                    setTimeout(checkVisibility, this.waitTimeBeforeNext);
                }
            };
            
            // Iniciar verifica√ß√£o ap√≥s um pequeno atraso
            setTimeout(checkVisibility, this.waitTimeBeforeNext);
        });
    }
    
    /**
     * Processa um elemento antes da narra√ß√£o
     * @param {HTMLElement} element - Elemento a ser processado
     * @param {number} index - √çndice do elemento na lista de sele√ß√µes
     * @returns {Promise} - Promise que resolve quando o elemento estiver pronto para narra√ß√£o
     */
    async processElementBeforeNarration(element, index) {
        if (!this.isActive || !element) return true;
        
        // Verificar visibilidade inicial
        const visibility = this.checkElementVisibility(element);
        
        // Registrar informa√ß√µes do elemento
        console.log(`üîç [${new Date().toISOString()}] Verificando elemento #${index + 1} antes da narra√ß√£o:`);
        console.log(`üìç Coordenadas: (${visibility.coordinates.left}, ${visibility.coordinates.top}) - (${visibility.coordinates.right}, ${visibility.coordinates.bottom})`);
        console.log(`üëÅÔ∏è Visibilidade: ${Math.round(visibility.visiblePercentage * 100)}% - ${visibility.position}`);
        
        // Se o elemento n√£o estiver vis√≠vel, rolar at√© ele
        if (!visibility.isVisible) {
            console.log(`üîÑ [${new Date().toISOString()}] Rolando para o elemento #${index + 1} (n√£o vis√≠vel)`);
            
            // Usar o ScrollManager para rolar at√© o elemento
            if (this.selectionManager && this.selectionManager.scrollManager) {
                this.selectionManager.scrollManager.setCurrentElement(element);
                
                // Aguardar um tempo para a rolagem ser conclu√≠da
                await new Promise(resolve => setTimeout(resolve, 800));
                
                // Verificar novamente a visibilidade ap√≥s a rolagem
                const newVisibility = this.checkElementVisibility(element);
                console.log(`üëÅÔ∏è Visibilidade ap√≥s rolagem: ${Math.round(newVisibility.visiblePercentage * 100)}% - ${newVisibility.position}`);
                
                // Se ainda n√£o estiver vis√≠vel o suficiente, aguardar mais
                if (!newVisibility.isVisible) {
                    console.log(`‚è≥ [${new Date().toISOString()}] Aguardando elemento #${index + 1} ficar mais vis√≠vel...`);
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            }
        }
        
        return true;
    }
}

// Inicializar o sistema de pausa inteligente quando o script for carregado
const smartPauseSystem = new SmartPauseSystem();